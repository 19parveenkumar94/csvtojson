#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatServer:server');
var http = require('http');
var ss = require('socket.io-stream');
var fs = require('fs');
var path = require('path');
var users = require('../models/user');
var personalChatData=require('../models/chatDataBase');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT|| '8082');
app.set('port', port);

/**
 * Create HTTP server.
 */
var usersOnline=[];
var userlist=[];
var person = require('../models/mongoose');
var server = http.createServer(app);
var io=require('socket.io').listen(server);
io.on('connection', function(socket){

  ss(socket).on('fileUpload', function(stream, data) {
      var filename = "public/images/"+path.basename(data.name);
      var x="/images/"+path.basename(data.name);
      stream.pipe(fs.createWriteStream(filename));
      console.log(data.sender+" "+data.reciever);
      var ss=findWithName(data.reciever)
      ss.emit('sendToRecieverFile',data.sender,x);
    });

  socket.on('join',function(msg){
    console.log(socket.id+" "+msg);
    users[socket.id]=msg;
    io.emit('peoples',users);
  });

  socket.on('chat_message', function(msg){
    var message =new person({name:users[socket.id],message:msg});
    message.save(function(err){
      if(err) return console.error(err);
    });
    io.emit('chat-message',users[socket.id] ,msg);
  });
  socket.on('loginCheck',function(user){
    users.findOne({ username: user['username'],password: user['password']},function (err, users) {
       if ((users==null)||(err)) {
         console.log("fail");
         socket.emit("fail");
       }
      else {

        var index=findInUserList(user['username']);
        if(index!=(-1))
        {
          console.log("present");
        }
        else {
          usersOnline.push({'socket':socket,'id':socket.id,'name':user['username']});
          userlist.push({'id':socket.id,'name':user['username']});
        }

      io.emit('success',userlist);

      }

     });

  });
  socket.on('acceptRequest',function(name,sender){
    var flag=0;
    console.log(name,sender);
    personalChatData.findOne({user1:name,user2:sender},function(err,row){
      if(row==null)
      {
        personalChatData.findOne({user1:sender,user2:name},function(err,row){
          if(row!=null)
          {
            flag=1;
          }
          else {
            var id=name+"-"+sender;
            var personalChat=new personalChatData({chatId:id,user1:name,user2:sender});
            console.log("database created for "+name+" "+sender);
            personalChat.save(function(err){
              if(err) return console.error(err);
            });

          }
        });

      }
    });




    var ss=findWithName(name);
    ss.emit('accepted',sender);
  });
  socket.on('sendToSender',function(sender,reciever,msg){
    var ss=findWithName(reciever);
    ss.emit('senderMsg',sender,msg);
  });
  socket.on('sendMsg',function(sender,reciever,msg){

    var flag=0;
    personalChatData.findOne({user1:reciever,user2:sender},function(err,row){
      if(row!=null)
      {
        flag=1;
        row['chatMessages'].push({'sender':sender,'message':msg});
        row.save(function(err){
          if(err) return console.error(err);
        });

      }
      else {
        {
          return console.error("not found");
        }
      }
    });
    if(flag==0)
    {
      personalChatData.findOne({user1:sender,user2:reciever},function(err,row){
        if(row!=null)
        {
          flag=1;
          row['chatMessages'].push({'sender':sender,'message':msg});
          row.save(function(err){
            if(err) return console.error(err);
          })
        }
      });
    }

    var ss=findWithName(reciever);
    if(ss)
    {
      console.log('found socket');
    }
    ss.emit('sendToReciever',sender,msg);
  });

  socket.on('rejectRequest',function(name){
    var ss=findWithName(name);
    ss.emit('rejected',name);
  });
  socket.on('request',function(id,name){
    var ss=findWithId(id);
  //  console.log(ss);
    ss.emit('recieveRequest',name);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */
 function findInUserList(name){
   for(var i=0;i<userlist.length;i++)
   {
     if(usersOnline[i]['name']==name)
     return i;
   }
   return -1;
 }
 function findWithName(name)
 {
   for(var i=0;i<usersOnline.length;i++)
   {
     if(usersOnline[i]['name']==name)
     return usersOnline[i]['socket'];
   }
 }
function findWithId(id)
{
  for(var i=0;i<usersOnline.length;i++)
  {
    if(usersOnline[i]['id']==id)
    return usersOnline[i]['socket'];
  }
}
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
